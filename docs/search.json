[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Altair Blog",
    "section": "",
    "text": "Altair: The interactive data visualization tool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/visualization.html",
    "href": "posts/visualization.html",
    "title": "Altair: The interactive data visualization tool",
    "section": "",
    "text": "Altair: The interactive data visualization tool\n\nIntroduction\nThe Altair library was released in August 2016 by Jake VanderPlas, Brian Granger, and other contributors from the Jupyter and PyData communities. It is a declarative statistical visualization library for Python, meaning that we don’t need to code how to do something instead we need to just tell what to do, altair will automatically figure out how to do it. Altair library creates beautiful interactive large variety of graphs like simple bar chart, histograms, line plot, scatter plot, to more complex graphs like heatmaps, geographical maps, etc.\nSo, why do we need it? We can use the simply pandas and matplotlib libraries for creating these graphs.\nAltair library makes the graph interactive which we can’t get from the above mentioned libraries or we can get them but it would require to code alot, with features like tooltips, zooming in and out of plots, selections with opacity, color, size (hover effect), dynamic update, also altair allows us to export the file into html files.\n\n\nInstallation & Setup:\nAltair can be simply installed by running the following command on the terminal:\n\nStep 1:\nUsing pip:\n\n! pip install altair \n\nUsing condas\n\n! conda install -c conda-forge altair\n\n\n\nStep 2:\nInstall a Renderer (For Jupyter, Colab, or VS Code), which is required for displaying charts, plots, etc.\nFor Jupyter Notebook\n\n! pip install vega_datasets notebook vega\n\n\nimport altair as alt\n\nalt.renderers.enable('notebook')\n\nFor VS Code\n\nimport altair as alt\n\nalt.renderers.enable('mimetype')\n\nFor Google Colab\n\nimport altair as alt\n\nalt.renderers.enable('colab')\n\n\n\n\nKey Features & Explanation with code examples:\n\n1. Declarative Syntax and Conciseness\nAltair allows us to write the code in declarative manner, that is we need to specify only what we want and not how we want, altair will figure it out at it’s own end. Also altair allows us to write the code in fewer lines due to its declarative syntax property.\n\nimport pandas as pd\nimport altair as alt\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({\n    'Name': ['Ford', 'Toyota', 'BMW', 'Honda', 'Chevy'],\n    'Horsepower': [150, 120, 200, 130, 180],\n    'MPG': [20, 35, 25, 32, 22],\n    'Origin': ['USA', 'Japan', 'Europe', 'Japan', 'USA']\n})\ndf\n\n\n\n\n\n\n\n\nName\nHorsepower\nMPG\nOrigin\n\n\n\n\n0\nFord\n150\n20\nUSA\n\n\n1\nToyota\n120\n35\nJapan\n\n\n2\nBMW\n200\n25\nEurope\n\n\n3\nHonda\n130\n32\nJapan\n\n\n4\nChevy\n180\n22\nUSA\n\n\n\n\n\n\n\nUsing Matplotlib:\n\nplt.bar(df['Name'], df['Horsepower'])\nplt.title('Horsepower of Car')\nplt.xlabel('Name')\nplt.ylabel('Horsepower')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nUsing altair:\n\nchart = alt.Chart(df).mark_bar().encode(\n    x='Name', y='Horsepower'\n).properties(title='Horsepower of Car')\nchart\n\n\n\n\n\n\n\n\n\n2. Interactivity with graphs\nAltair library makes the graph interactive-\n\nWhen we add the .interactive() parameter enabling us to zoom in and out of the graph and drag also.\nWe can add brush with opacity to be able to highlight a particular section\nUse tooltips\n\n\nprint(\"\\tTooltip\")\nfrom IPython.display import Image, display\ndisplay(Image(filename=\"1.jpg\"))\n\n    Tooltip\n\n\n\n\n\n\n\n\n\n\nprint(\"\\tHighlighting a specific section\")\nfrom IPython.display import Image, display\ndisplay(Image(filename=\"2.jpg\"))\n\n    Highlighting a specific section\n\n\n\n\n\n\n\n\n\n\n\n3. Data aggregation\nIn altair we need not process the data before, that is we don’t need to create a groupby object beforehand. But in matplotlib we first have to select the specific data using aggregation.\nMatplotlib\n\navgmpg = df.groupby('Origin')['MPG'].mean()\nplt.bar(avgmpg.index, avgmpg.values, color=['blue', 'green', 'red'])\nplt.title('Average MPG by Origin')\nplt.xlabel('Origin')\nplt.ylabel('Average MPG')\nplt.show()\n\n\n\n\n\n\n\n\nAltair\n\nchart = alt.Chart(df).mark_bar().encode(\n    x='Origin', y=alt.Y('mean(MPG)'),\n    color='Origin'\n).properties(title='Average MPG by Origin')\nchart\n\n\n\n\n\n\n\n\n\n4. Handling Multiple plots\nAltair allows us to plot multiple plots easily. It allows us to plot more than one parameters in a single plot just by using + operator, plot two graphs horizontally(side by side) by using “|” operator and vertically by using “&” operator, which is much more simpler than in matplotlib.\nMatplotlib\n\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport matplotlib.pyplot as plt\n\nx_values = np.linspace(0, 5, 100)  \ndata = pd.DataFrame({\n    'x': x_values,\n    'y_x2': x_values**2,      \n    'y_sqrt': np.sqrt(x_values)  \n})\n\nPloting multiple graphs on same plot\nMatplotlib\n\nplt.figure(figsize=(8, 4))\nplt.plot(data['x'], data['y_x2'], 'r-', label='y = x^2')\nplt.plot(data['x'], data['y_sqrt'], 'b', label='y = sqrt(x)')\nplt.title(' y = x^2 and y = sqrt(x)')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nAltair\n\nx2 = alt.Chart(data).mark_line(color='red').encode(\n    x='x', y='y_x2'\n    ).properties(width=300, height=200)\n\nsqrt = alt.Chart(data).mark_line(color='blue').encode(\n    x='x', y='y_sqrt'\n    ).properties(width=300, height=200)\n(x2 + sqrt).properties(title='y = x^2 and y = sqrt(x)')\n\n\n\n\n\n\n\nPloting graphs side by side\nMatplotlib\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\nax1.plot(data['x'], data['y_x2'], 'r', label='y = x^2')\nax1.set_title('y = x^2')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.legend()\nax1.grid(True)\n\nax2.plot(data['x'], data['y_sqrt'], 'b', label='y = sqrt(x)')\nax2.set_title('y = sqrt(x)')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.legend()\nax2.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nAltair\n\nx2 = alt.Chart(data).mark_line(color='red').encode(\n    x='x', y='y_x2'\n).properties(width=200, height=200, title='y = x^2')\n\nsqrt = alt.Chart(data).mark_line(color='blue').encode(\n    x='x',\n    y='y_sqrt'\n).properties(width=200, height=200, title='y = sqrt(x)')\n\nx2 | sqrt\n\n\n\n\n\n\n\nPloting graphs one above other\nMatplotlib\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 6))\nax1.plot(data['x'], data['y_x2'], 'r-', label='y = x^2')\nax1.set_title('y = x^2')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.legend()\nax1.grid(True)\n\nax2.plot(data['x'], data['y_sqrt'], 'b-', label='y = sqrt(x)')\nax2.set_title('y = sqrt(x)')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.legend()\nax2.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nAltair\n\nx2 = alt.Chart(data).mark_line(color='red').encode(\n    x='x', y='y_x2'\n).properties(width=300, height=150, title='y = x^2')\n\nsqrt = alt.Chart(data).mark_line(color='blue').encode(\n    x='x', y='y_sqrt'\n).properties(width=300, height=150, title='y = sqrt(x)')\n\nx2 & sqrt\n\n\n\n\n\n\n\nUSE CASES\nAltair is widely used in different domains because of its interactive capabilities, declarative syntax, and smooth integration with Python data science tools. Here are some important areas where Altair proves to be especially useful:\n1.⁠ ⁠Data Exploration & Analysis • Altair allows users to visualise distributions and relationships in datasets, making it perfect for rapid exploratory data analysis (EDA).\n2.⁠ ⁠Interactive Dashboards & Reports •⁠ ⁠With Altair, users can create interactive plots that display dynamic distributions in environments like Jupyter Notebooks, Streamlit, or Voila.\n3.⁠ ⁠Machine Learning & AI •⁠ ⁠It aids in important analyses such as visualizing model performance (e.g., confusion matrices, ROC curves) and understanding data distribution prior to model training.\n4.⁠ ⁠Business Intelligence & Decision Making •⁠ ⁠Companies uses Altair Library for data-driven storytelling to extract meaningful insights from their data.\n5.⁠ ⁠Realtime Data Monitoring Altair is capable to visualise streaming data which is useful in monitoring website traffic, server performance or stocks etc.\n6.⁠ ⁠Geographic Data •⁠ ⁠Altair enables users geospatial plotting, making it valuable for mapping and location-based analytics.\nCONCLUSION\nAltair is an easy-to-use, high-powered, and versatile data science visualization library that’s built for contemporary data science workflows. It’s remarkable in many ways. Altair may not completely replace Matplotlib or Seaborn for highly customised visualisations, but it is ideal in scenarios where expressiveness, simplicity, and interactivity are important. For data analysts, machine learning practitioners or businesses Altair is a crucial tool to include in the data visualisation toolkit!\nREFERENCES and FURTHER READINGS\nOfficial Documentation:   https://altair-viz.github.io/user_guide/api.html#api \nVideo Tutorial: 1)  https://www.youtube.com/watch?v=ms29ZPUKxbU by Jake VanderPlas  2)  https://youtu.be/umTwkgQoo_E?si=DbeemSCUDsWo4mCX\nVega-Lite Docs:  https://vega.github.io/vega-lite-v2/docs/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vega-Altair: A Declarative Statistical Visualization Library",
    "section": "",
    "text": "Image Credit: Source Name"
  },
  {
    "objectID": "index.html#welcome-to-vega-altair-blog",
    "href": "index.html#welcome-to-vega-altair-blog",
    "title": "Vega-Altair: A Declarative Statistical Visualization Library",
    "section": "Welcome to Vega-Altair Blog!",
    "text": "Welcome to Vega-Altair Blog!\nHello! We are three first-year undergraduates from IIT Gandhinagar.\nWe created this site to provide information about Altair, a powerful declarative statistical visualization library.\nYou can visit our blog by clicking the Blog button in the top-right corner.\n\n\n🎥 Introduction Video\n\n\n\nYour browser does not support the video tag. \n\n\n\n\n🚀 Explore More\n🔹 Learn more on our Blog\n🔹 Visit our You Tube\n🔹 Check out Altair Documentation\n🔹 Follow our GitHub for updates."
  }
]